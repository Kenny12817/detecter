#!/usr/bin/env python3
import rospy
from std_msgs.msg import UInt16
from open_manipulator_msgs.srv import SetJointPosition, SetJointPositionRequest
from open_manipulator_msgs.srv import SetKinematicsPose, SetKinematicsPoseRequest
import time

data = None

def callback(msg):
    global data
    data = msg.data

def set_gripper(angle, t):
    service_name = "/goal_tool_control"
    rospy.wait_for_service(service_name)
    
    try:
        service = rospy.ServiceProxy(service_name, SetJointPosition)
        
        request = SetJointPositionRequest()
        request.joint_position.joint_name = ["gripper"]
        request.joint_position.position = [angle]
        request.path_time = t
        
        response = service(request)
        return response
    except Exception as e:
        rospy.loginfo("%s" % e)
        return False

angle = 0.010

def open_gripper(t):
    global angle
    angle = angle + 0.001
    return set_gripper(angle, t)

def close_gripper(t):
    global angle
    angle = angle - 0.001
    return set_gripper(angle, t)

def move_to(x, y, z, t):
    service_name = "/goal_task_space_path_position_only"
    rospy.wait_for_service(service_name)
    
    try:
        service = rospy.ServiceProxy(service_name, SetKinematicsPose)
        
        request = SetKinematicsPoseRequest()
        request.end_effector_name = "gripper"
        request.kinematics_pose.pose.position.x = x
        request.kinematics_pose.pose.position.y = y
        request.kinematics_pose.pose.position.z = z
        request.path_time = t
        
        response = service(request)
        return response
    except Exception as e:
        rospy.loginfo("%s" % e)
        return False

if __name__ == '__main__':
    rospy.init_node('test')
    rospy.loginfo("E")
    _topic_image = "/detector"
    rospy.Subscriber(_topic_image, UInt16, callback)
    rospy.wait_for_message(_topic_image, UInt16)

    rate=rospy.Rate(100)

    t = 1.0
    set_gripper(angle, t)
    time.sleep(t)

    xyz_home = (0.144, 0.000, 0.119)
    xyz_take = (0.144, 0.000, 0.189)

    move_to(xyz_home[0], xyz_home[1], xyz_home[2], t)
    time.sleep(t)

    n = 0
    while not rospy.is_shutdown():
        rospy.loginfo("While Start")
        rate.sleep()

        '''
        angle = angle-0.001
        set_gripper(angle,t)
        time.sleep(t)
        '''
        
        while n == 0:
            rospy.loginfo("start grabbing")
            while(data>=250):
                if(angle<=0.010 and angle>=-0.010):
                    print(data, " pressing"  if data <250 else " none")
                    close_gripper(t)
                    time.sleep(t)
            move_to(xyz_take[0], xyz_take[1], xyz_take[2], t)
            time.sleep(t)
            '''
            set_gripper(0.01,t)
            time.sleep(t)
            '''
            rospy.loginfo("end grabbing")
            n = 1
